#!/anaconda3/bin/python3

# Python Standard Library
import argparse
from os import path, system
import json

# Other dependencies
from obspy import read, read_events, UTCDateTime

# Local files
from vsr_db_utils.picking import pick
from vsr_db_utils.io import MSD_FNAME_FMT, JSN_FNAME_FMT, st_to_fname


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--inppath', help='Input folder path')
    parser.add_argument('-o', '--outpath', help='Output folder path')
    parser.add_argument('-e', '--eventid', help='Filename')
    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()

    label = args.eventid.split('.')[0]

    msd_filepath = path.join(args.inppath, args.eventid + '.mseed')
    st = read(msd_filepath)

    stations = list(set([tr.stats.station for tr in st]))

    xml_filepath = path.join(args.inppath, args.eventid + '.xml')
    if path.isfile(xml_filepath):
        ev = read_events(xml_filepath)[0]
        print(f'\t{ev.magnitudes[0]}.mag')
        picks = [
            p for p in ev.picks
            if p.waveform_id.station_code in stations
            and p.phase_hint == 'P'
        ]
    else:
        picks = None

    d = {}

    for tr in st:
        if tr.stats.component != 'Z':
            continue

        print(f'{tr.stats.station}-{tr.stats.channel}')

        if picks is not None:
            p = [p for p in picks if p.waveform_id.station_code == tr.stats.station]
            if len(p) > 0:
                p = p[0]
            else:
                p = None
        else:
            p = None

        times = pick(tr, p=p)

        if len(times) == 1:                # P already picked, coda just picked
            d[tr.stats.station] = {}
            d[tr.stats.station]['P']  = str(p.time)
            d[tr.stats.station]['Cs'] = str(times[0])
        elif len(times) == 2:              # both P and coda just picked
            d[tr.stats.station] = {}
            d[tr.stats.station]['P']  = str(min(times))
            d[tr.stats.station]['Cs'] = str(max(times))

    msd_outpath = path.join(
        args.outpath,
        MSD_FNAME_FMT.format(**st_to_fname(label, st))
    )
    jsn_outpath = path.join(
        args.outpath,
        JSN_FNAME_FMT.format(**st_to_fname(label, st))
    )

    if len(d) > 0:
        system(f'cp {msd_filepath} {msd_outpath}')

        with open(jsn_outpath, 'w') as f:
            json.dump(d, f, indent=4)
