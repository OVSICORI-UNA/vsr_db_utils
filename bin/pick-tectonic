#!/anaconda3/bin/python3

# Python Standard Library
import argparse
from os import path, system, listdir
import json

# Other dependencies
from obspy import read, read_events, UTCDateTime

# Local files
from vsr_db_utils.picking import pick
from vsr_db_utils.io import MSD_FNAME_FMT, JSN_FNAME_FMT, st_to_fname


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--inppath', help='Input folder path')
    parser.add_argument('-o', '--outpath', help='Output folder path')
    parser.add_argument('-e', '--eventid', help='Filename')
    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()

    label = args.eventid.split('.')[0]

    msd_filepath = path.join(args.inppath, args.eventid + '.mseed')
    st = read(msd_filepath)
    stations = list(set([tr.stats.station for tr in st]))

    jsn_filepath = path.join(args.inppath, args.eventid + '.json')

    with open(jsn_filepath) as f:
        d = json.load(f)

    for tr in st:
        if tr.stats.component != 'Z':
            continue

        print(f'{tr.stats.station}-{tr.stats.channel}')

        times = pick(tr, p=None)

        if len(times) == 2:
            d[tr.stats.station] = {}
            d[tr.stats.station]['P']  = str(min(times))
            d[tr.stats.station]['Cs'] = str(max(times))

    if any(station in d.keys() for station in stations):
        outdir = path.join(args.outpath, 'accepted')
    else:
        outdir = path.join(args.outpath, 'rejected')

    msd_outpath = path.join(
        outdir, MSD_FNAME_FMT.format(**st_to_fname(label, st))
    )
    jsn_outpath = path.join(
        outdir, JSN_FNAME_FMT.format(**st_to_fname(label, st))
    )

    system(f'mv {msd_filepath} {msd_outpath}')

    with open(jsn_outpath, 'w') as f:
        json.dump(d, f, indent=4)
